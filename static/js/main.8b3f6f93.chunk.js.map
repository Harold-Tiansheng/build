{"version":3,"sources":["index.js"],"names":["turn","winningArray","player1","player2","Grid","style","height","width","i","length","every","val","includes","alert","console","log","state","Fragment","this","id","props","row","column","onClick","document","getElementById","backgroundColor","push","toString","winningListener","React","Component","Connect4","gridId","generateNum","renderGrid","ReactDOM","render"],"mappings":"kLAGIA,EAAO,EAIPC,EAAe,CACjB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,EAAG,EAAG,EAAG,IACV,CAAC,EAAG,EAAG,GAAI,IACX,CAAC,EAAG,EAAG,GAAI,IACX,CAAC,EAAG,EAAG,GAAI,IACX,CAAC,EAAG,EAAG,GAAI,IACX,CAAC,EAAG,EAAG,GAAI,KAITC,EAAU,GACVC,EAAU,GAERC,E,4MAKJC,MAAQ,CACNC,OAAQ,IACRC,MAAO,K,qDAIT,WAEE,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAaQ,OAAQD,IACnCP,EAAaO,GAAGE,OAAM,SAACC,GAAD,OAAST,EAAQU,SAASD,OAClDE,MAAM,eACNC,QAAQC,IAAI,gBACHd,EAAaO,GAAGE,OAAM,SAACC,GAAD,OAASR,EAAQS,SAASD,QACzDE,MAAM,eACNC,QAAQC,IAAI,kB,oBAKlB,WAAU,IAAD,OAEHC,GAAQ,EACZ,OACE,cAAC,IAAMC,SAAP,UACE,wBACEZ,MAAOa,KAAKb,MACZc,GAAID,KAAKE,MAAMD,GACfE,IAAKH,KAAKE,MAAMC,IAChBC,OAAQJ,KAAKE,MAAME,OAEnBC,QAAS,WACHP,IACFQ,SAASC,eAAe,EAAKL,MAAMD,IAAId,MAAMqB,gBAC3C1B,EAAO,IAAM,EAAI,MAAQ,SAC3BA,IACAc,QAAQC,IAAI,iBAAmBf,GAE/Bc,QAAQC,IACN,kCACE,EAAKK,MAAMC,IACX,IACA,EAAKD,MAAME,OACX,KAEAtB,EAAO,IACTa,MAAM,sDAERG,GAAQ,EACJhB,EAAO,GAAK,GACdE,EAAQyB,KAAK,EAAKP,MAAMD,IACxBL,QAAQC,IAAIb,EAAQ0B,cAEpBzB,EAAQwB,KAAK,EAAKP,MAAMD,IACxBL,QAAQC,IAAIZ,EAAQyB,aAEtB,EAAKC,4B,GA5DAC,IAAMC,WAsEnBC,E,4MACJV,OAAS,E,EACTD,IAAM,E,iDAGN,WACMH,KAAKI,OAAS,EAChBJ,KAAKI,UAELJ,KAAKG,MACLH,KAAKI,OAAS,K,wBAKlB,SAAWW,GAET,OADAf,KAAKgB,cACE,cAAC9B,EAAD,CAAMe,GAAIc,EAAQZ,IAAKH,KAAKG,IAAKC,OAAQJ,KAAKI,W,oBAGvD,WACE,IAAIW,EAAS,EACb,OACE,gCACE,gCACGf,KAAKiB,WAAWF,KAChBf,KAAKiB,WAAWF,KAChBf,KAAKiB,WAAWF,KAChBf,KAAKiB,WAAWF,QAEnB,gCACGf,KAAKiB,WAAWF,KAChBf,KAAKiB,WAAWF,KAChBf,KAAKiB,WAAWF,KAChBf,KAAKiB,WAAWF,QAEnB,gCACGf,KAAKiB,WAAWF,KAChBf,KAAKiB,WAAWF,KAChBf,KAAKiB,WAAWF,KAChBf,KAAKiB,WAAWF,QAEnB,gCACGf,KAAKiB,WAAWF,KAChBf,KAAKiB,WAAWF,KAChBf,KAAKiB,WAAWF,KAChBf,KAAKiB,WAAWF,e,GA9CJH,IAAMC,WAqD7BK,IAASC,OAAO,cAACL,EAAD,IAAuBR,SAASC,eAAe,W","file":"static/js/main.8b3f6f93.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nlet turn = 1;\n\n//all winning situation\n\nlet winningArray = [\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9, 10, 11, 12],\n  [13, 14, 15, 16],\n  [1, 5, 9, 13],\n  [2, 6, 10, 14],\n  [3, 7, 11, 15],\n  [4, 8, 12, 16],\n  [1, 6, 11, 16],\n  [4, 7, 10, 13],\n];\n\n//store player click button information in the array\nlet player1 = [];\nlet player2 = [];\n\nclass Grid extends React.Component {\n  /*constructor(props) {\n    super(props);\n    this.state = { turn: 1 };\n  }*/\n  style = {\n    height: 100,\n    width: 100,\n  };\n\n  //create a winning listener to inform player who win the game\n  winningListener() {\n    //check player's array whether it is matching any winning situation\n    for (var i = 0; i < winningArray.length; i++) {\n      if (winningArray[i].every((val) => player1.includes(val))) {\n        alert(\"player1 win\");\n        console.log(\"player1 win\");\n      } else if (winningArray[i].every((val) => player2.includes(val))) {\n        alert(\"player2 win\");\n        console.log(\"player2 win\");\n      }\n    }\n  }\n\n  render() {\n    //this state can make sure the button will work only once\n    let state = true;\n    return (\n      <React.Fragment>\n        <button\n          style={this.style}\n          id={this.props.id}\n          row={this.props.row}\n          column={this.props.column}\n          //it is a long click method becasue it changes color and count the turn. And there is a event listener that waits  for the win\n          onClick={() => {\n            if (state) {\n              document.getElementById(this.props.id).style.backgroundColor =\n                turn % 2 === 0 ? \"red\" : \"yellow\";\n              turn++;\n              console.log(\"this is turn: \" + turn);\n              //this can show which cell you are clicking\n              console.log(\n                \"this is the cell you clicked: (\" +\n                  this.props.row +\n                  \",\" +\n                  this.props.column +\n                  \")\"\n              );\n              if (turn > 16) {\n                alert(\"you have click all button, please restart the game\");\n              }\n              state = false;\n              if (turn % 2 == 0) {\n                player1.push(this.props.id);\n                console.log(player1.toString());\n              } else {\n                player2.push(this.props.id);\n                console.log(player2.toString());\n              }\n              this.winningListener();\n            } else {\n              //do nothing\n            }\n          }}\n        ></button>\n      </React.Fragment>\n    );\n  }\n}\nclass Connect4 extends React.Component {\n  column = 0;\n  row = 1;\n\n  //this function is used to generate column and row number\n  generateNum() {\n    if (this.column < 4) {\n      this.column++;\n    } else {\n      this.row++;\n      this.column = 1;\n    }\n  }\n\n  //this function is used to generate a grid element and a id for grid\n  renderGrid(gridId) {\n    this.generateNum();\n    return <Grid id={gridId} row={this.row} column={this.column}></Grid>;\n  }\n\n  render() {\n    let gridId = 1;\n    return (\n      <div>\n        <div>\n          {this.renderGrid(gridId++)}\n          {this.renderGrid(gridId++)}\n          {this.renderGrid(gridId++)}\n          {this.renderGrid(gridId++)}\n        </div>\n        <div>\n          {this.renderGrid(gridId++)}\n          {this.renderGrid(gridId++)}\n          {this.renderGrid(gridId++)}\n          {this.renderGrid(gridId++)}\n        </div>\n        <div>\n          {this.renderGrid(gridId++)}\n          {this.renderGrid(gridId++)}\n          {this.renderGrid(gridId++)}\n          {this.renderGrid(gridId++)}\n        </div>\n        <div>\n          {this.renderGrid(gridId++)}\n          {this.renderGrid(gridId++)}\n          {this.renderGrid(gridId++)}\n          {this.renderGrid(gridId++)}\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Connect4></Connect4>, document.getElementById(\"root\"));\n"],"sourceRoot":""}